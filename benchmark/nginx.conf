user www-data;
worker_processes auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
	worker_connections 768;
	# multi_accept on;
}

http {

	##
	# Basic Settings
	##

	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;
	keepalive_timeout 65;
	types_hash_max_size 2048;
	# server_tokens off;

	# server_names_hash_bucket_size 64;
	# server_name_in_redirect off;

	include /etc/nginx/mime.types;
	default_type application/octet-stream;

	##
	# SSL Settings
	##

	ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE
	ssl_prefer_server_ciphers on;

	##
	# Logging Settings
	##

	access_log /var/log/nginx/access.log;
	error_log /var/log/nginx/error.log;

	##
	# Gzip Settings
	##

	gzip on;
	gzip_disable "msie6";

	# gzip_vary on;
	# gzip_proxied any;
	# gzip_comp_level 6;
	# gzip_buffers 16 8k;
	# gzip_http_version 1.1;
	# gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

	##
	# Virtual Host Configs
	##

	include /etc/nginx/conf.d/*.conf;
	# include /etc/nginx/sites-enabled/*;

    upstream socket {
        # server unix:///vagrant/benchmark/puma.sock fail_timeout=0;
        server 0.0.0.0:9292 fail_timeout=0;
    }

    server {
        listen 3000 default_server;
        listen [::]:3000 default_server;

        root /vagrant/benchmark;

        server_name _;

        location / {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
            proxy_set_header X-Request-Start $msec;

            # If the file exists as a static file serve it directly without
            # running all the other rewrite tests on it
            if (-f $request_filename) {
            break;
            }

            # check for index.html for directory index
            # if it's there on the filesystem then rewrite
            # the url to add /index.html to the end of it
            # and then break to send it to the next config rules.
            if (-f $request_filename/index.html) {
            rewrite (.*) $1/index.html break;
            }

            # this is the meat of the rack page caching config
            # it adds .html to the end of the url and then checks
            # the filesystem for that file. If it exists, then we
            # rewrite the url to have explicit .html on the end
            # and then send it on its way to the next config rule.
            # if there is no file on the fs then it sets all the
            # necessary headers and proxies to our upstream pumas
            if (-f $request_filename.html) {
            rewrite (.*) $1.html break;
            }

            if (!-f $request_filename) {
            proxy_pass http://socket;
            break;
            }
        }

        # Now this supposedly should work as it gets the filenames with querystrings that Rails provides.
        # BUT there's a chance it could break the ajax calls.
        location ~* \.(ico|css|gif|jpe?g|png|js)(\?[0-9]+)?$ {
            expires max;
            break;
        }

        # Error pages
        # error_page 500 502 503 504 /500.html;
        location = /500.html {
            root /vagrant/benchmark;
        }

        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            deny all;
        }
    }

}
